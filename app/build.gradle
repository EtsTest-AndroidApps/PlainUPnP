apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.m3sv.droidupnp"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/beans.xml'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.13.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.2.10'

    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    implementation deps.support.appCompat
    implementation deps.support.v4
    implementation deps.support.design
    implementation deps.support.recyclerView
    implementation deps.support.cardView
    implementation deps.support.constraintLayout
    implementation deps.support.preferences

    implementation deps.architectureComponents.lifecycle
    implementation deps.architectureComponents.lifecycleReactiveStreams

    implementation deps.timber
    implementation deps.kotlin

    implementation deps.rx.kotlin
    implementation deps.rx.binding
    implementation deps.rx.android

    implementation deps.retrofit.core
    implementation deps.retrofit.rxAdapter

    implementation deps.coroutines

    implementation(deps.glide.core) {
        exclude group: "com.android.support"
    }
    kapt deps.glide.compiler

    implementation deps.dagger.core
    compileOnly deps.dagger.annotation
    kapt deps.dagger.compiler

    implementation deps.dagger.android
    implementation deps.dagger.androidSupport
    kapt deps.dagger.androidProcessor

    // Cling
    implementation group: 'org.fourthline.cling', name: 'cling-core', version: versions.cling
    implementation group: 'org.fourthline.cling', name: 'cling-support', version: versions.cling
    implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: versions.jetty
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: versions.jetty
    implementation group: 'org.eclipse.jetty', name: 'jetty-client', version: versions.jetty

    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.14'

    implementation('de.psdev.licensesdialog:licensesdialog:1.8.1') {
        exclude module: 'support-v4'
    }

    implementation project(':common')
}

kapt {
    generateStubs = true
}


File propFile = file('signing.properties')
if (propFile.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}
